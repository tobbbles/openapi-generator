{{>licenseInfo}}
{{#models}}{{#model}}defmodule {{moduleName}}.Model.{{classname}} do
  @moduledoc """
  {{&description}}
  """
  @allowed_values [
    {{#allowableValues}}
    {{#enumVars}}
    {{{value}}},
    {{/enumVars}}
    {{/allowableValues}}
  ]

  @type t :: String.t()

{{#hasComplexVars}}
  alias {{&moduleName}}.Deserializer

  def decode(value) do
    value
    {{#vars}}
    {{^isPrimitiveType}}
    {{#baseType}} |> Deserializer.deserialize({{#atom}}{{&baseName}}{{/atom}}, {{#isArray}}:list, {{&moduleName}}.Model.{{{items.baseType}}}{{/isArray}}{{#isMap}}:map, {{&moduleName}}.Model.{{{items.baseType}}}{{/isMap}}{{#isDate}}:date, nil{{/isDate}}{{#isDateTime}}:datetime, nil{{/isDateTime}}{{^isDate}}{{^isDateTime}}{{^isMap}}{{^isArray}}:struct, {{moduleName}}.Model.{{baseType}}{{/isArray}}{{/isMap}}{{/isDateTime}}{{/isDate}})
    {{/baseType}}
    {{/isPrimitiveType}}
    {{/vars}}
{{/hasComplexVars}}
{{^hasComplexVars}}
  def decode(value) do
    value
{{/hasComplexVars}}
  end

  defimpl Jason.Encoder, for: __MODULE__ do
    def encode(value, opts) do
      Jason.Encode.string(value, opts)
    end
  end
end
{{/model}}{{/models}}
